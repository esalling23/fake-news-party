{{!< default}}
{{!-- 
/**
 * Emerging Citizens
 * Developed by Engagement Lab, 2016
 * ==============
 * 
 * Script include for global logic
 * ==========
 */
--}}

<script type="text/javascript">

	var socket;
	var socketEvents;
  var gameCode;
  var gameEnded = false;
	var gameContainer;

  var playerId;

	var role;
	var chosenProfile;

 $(document).ready(function() {

	var timeline = new TimelineLite();

  // All possible socket event IDs
	var eventIds = [
		
		'connect',
		'disconnect',

		'game:start', 
		'game:rules',
		'game:newRound',

		'profile:complete',
		'profile:fail',
		'game:base',
		'game:levels',
		'game:end',

		'game:newProfile',
		'game:newFeed',
		
		'game:newRound',
		'game:playerData',

		'profile:score',

		'feed:end', 
		'feed:update',
		'feed:response'

	];


	/* 
	 Associate provided data object with current game ID
	*/
	var emitData = function(data) {

		if(gameCode === undefined && typeof(data.code) !== 'undefined')
			gameCode = data.code;

		return { gameId: gameCode, msgData: data };
	
	};

	/* 
	 Obtains the embedded data ('data-key="something"') object from the provided submit button
	*/
	var getFormData = function(submitElement) {

		var pkg;

		if(submitElement[0].dataset === undefined)
			return undefined;
		
		try {
			pkg = JSON.parse(submitElement[0].dataset.package);
		}
		catch(e) {
			pkg = submitElement[0].dataset.package;
		}

		if($.isPlainObject(pkg)) {
			$.each(Object.keys(pkg), function( key, value ) {

				if(pkg[value] !== undefined)
				  pkg[value] = $(pkg[value].toString()).val();

			});
		}
		else if(!submitElement.is('button'))
			pkg = $(pkg).val();

		return pkg;

	};

	var registerEvents = function() {

	    {{#ifeq environment "development"}}
	        
	        socket.on('connect_timeout', function() {
	           console.warn('Client timed out when connecting.');
	           {{!-- debugger; --}}
	        });
	        socket.on('disconnect', function() {
	           console.warn('Client was disconnected!');
	           {{!-- debugger; --}}
	        });
	        socket.on('reconnecting', function() {
	           console.log('Reconnecting.');
	           {{!-- debugger; --}}
	        });
	        socket.on('reconnect_attempt', function() {
	           console.log('Trying to reconnect!');
	           {{!-- debugger; --}}
	        });
	        socket.on('reconnect_error', function(err) {
	           console.error('Reconnect error: %s', err);
	           {{!-- debugger; --}}
	        });

	        console.log('Connecting to game "' + gameCode + '".');

	    {{/ifeq}}

	    $.each(eventIds, function(index, id) {
	      
	      socket.on(id, function(eventData) {

	            {{#ifnoteq environment "production"}}

	                $('#last-event').text('last event: ' + id);

	                console.log("EVENT ID: ", id);

	            {{/ifnoteq}}
	            
	            socketEvents(id, eventData);

	            if(typeof(gameEvents) == "function")
	                gameEvents(id, eventData);

	        });

	    });

	};

	// Show body only after everything is loaded
  	// document.body.style.display = "block";
  	$('body').fadeIn(1000);

  	// Login Popup Button Handler
    $('#teacher-entry, #student-entry').on('click', function(e) {
    	var data = {};
    	role = e.target.id.replace('-welcome', '');

    	$.get( 
    		"/api/welcome/" + role,
			data,
			function( data ) {
				$('.modal-wrapper#general').html(data.eventData).fadeIn();
			}
		);
    });

    // Login/Signup Button Handler
    $('body').on('click', '#login', function(){
		var data = role;

    	$.get( 
    		"/api/login/" + role,
			data,
			function( data ) {

				window.location = data;

			}
		);
	});

    // Timespan Extended
    // When Clicking on a timespan block, it should fade away and show its broken down blocks (ie. 1800 would break down into 1800, 1820, 1840, 1860, 1880)
    // There should be an API call to get the playable characters for each time section
    $('body').on('click', '.timespan', function(e) {
    	$('.timespan-wrap').fadeOut();

    	var data = {
    		timespan: $(this).attr('id')
    	};

    	$.get( 
    		"/api/timespan/" + $(this).attr('id'),
			data,
			function( data ) {

				$('.timespan-ext').html(data.eventData).fadeIn();

			}
		);
    });

    // Click on profile and open code popup
    $('body').on('click', '.profile', function(e) {

    	$('.modal.code-wrapper #profile-name').text(e.target.attributes["data-name"].nodeValue);

    	chosenProfile = e.target.attributes["id"].nodeValue;

    	$('.modal-wrapper#code-modal, .modal.code-wrapper').fadeIn(); 

    });

    // Start Playing as Character - with or without class
    $('body').on('click', '#start-game', function(e) {

    	var pkg = {
    		profile: chosenProfile, 
    		code: $('.code').val()
    	};

    	$.post( 
		  	"/api/create/",
		  	pkg, 
				function( data ) {
					
					if(data.error_code !== undefined) {

						$('#session-create .error').text(data.msg).fadeIn();
						
						return;
					}

					window.location = data.url;

			});

    });


	{{#ifeq section 'player'}}

		socket = io('//{{host}}', {
		 	path: '/fake-news', 
		 	reconnection: true,
		 	'reconnectionDelay': 500,
		 	'maxReconnectionAttempts':Infinity
		});

		registerEvents();

		socketEvents = function(eventId, eventData) {
		    
		    switch (eventId) {

		        case 'connect':

			        console.log("connected");

			        break;

			    case 'game:newProfile': 

			    	data = eventData.data;
			    	console.log(data, " new profile")

			      	var startingpoints = 10000*parseInt(data.currentProfile.level);
			      	var bar;

			      	$('.pre').hide(function() {
			      		$('.game').show();
			      	});		      	

			      	$("#current-profile").html(eventData.html).fadeIn(function(){

			      		setTimeout(function () {

						    $('#analysis').fadeIn();

						}, 2000);

						$('#start-round').on('click', function() {

							$(this).fadeOut(function(){
								$('.profile-wrapper .profile-btn').fadeIn();
							});

				      		socket.emit('game:newFeed', 'TEST');
				      		
				      	});

			      	});

			      	break;

			    case 'game:newFeed': 

			      	data = eventData.data;
		        	console.log("DATA: ", data);

		        	$('.profile').animate({
		        		top: '100%'
		        	}, 1000, 'linear', function(){
		        		$(this).addClass('closed');
		        	});

		        	$("#feed").html(eventData.html).addClass('ACTIVE').fadeIn(function(){
		        		$('.fb-footer').show();
		        	});

		        	// close/open profile
		        	$('.profile-btn').click(function(){
						$('.profile.closed').animate({
			        		top: '0%'
			        	}, 1000, 'linear', function(){
			        		$('.profile').toggleClass('closed').toggleClass('open');
			        	});
			        	$('.profile.open').animate({
			        		top: '100%'
			        	}, 1000, 'linear', function(){
			        		$('.profile').toggleClass('open').toggleClass('closed');
			        	});
		        	});

		        	$('#feed-btn').click(function(){
						$('.profile').animate({
			        		left: '100%'
			        	}, 1000, 'linear', function(){
			        		$(this).hide();
			        	});
		        	});

		        	{{> script/falling_logic}}

		        	$(document).trigger('event:feed');

			      	break;

		        case 'comment:update':

			        console.log(eventData.msg);

			        break;

			    case 'feed:update':

			    	// Double the starting number to get to 100%
			    	// Divide that by current points to get %
				    bar = 100 * (eventData.points/($('.points-bar').data('start')*2));
				    console.log($('.points-bar').data('start'), eventData.points)
					bar = bar.toString();

			        var feed = $('.post-feed');

			        var likesCount = 0, 
			        	angryCount = 0;	

			        $({ countNum: $('.points-bar div').text() })
					.animate({ countNum: eventData.points },
					{ 
					    duration: 500,
					    easing:'linear',
					    step: function() {
					      $('.points-bar div').text(Math.floor(this.countNum));
					    },
					    complete: function() {
					      $('.points-bar div').text(this.countNum);
					    }
					});

			        $('.points-bar div').animate({
			        	width: bar + '%'
			        }, 500, function() {
			        	console.log('moved to ' + bar)
			        });

			        if (bar <= 20) {
			        	$('.points-bar div').animate({
				        	background: '#fa3e3e'
				        }, 500, function() {
				        	console.log('bar color hcange')
				        });
			        } else if (bar <= 40) {
			        	$('.points-bar div').animate({
				        	background: '#f8a058'
				        }, 500, function() {
				        	console.log('bar color change')
				        });
			        }

			        if (eventData.reactions) {
			        	 // Check for type of response
			        	_.each(eventData.reactions, function(reaction, index){

			        		console.log(reaction, index)
			        		if (reaction == 'likes') {
					        	console.log("liked!")
					        	likesCount = Math.round((Math.random() * 1) + 1);
					        } else if (reaction == 'angry') {
					        	console.log("not liked!")
						        angryCount = Math.round((Math.random() * 1) + 1);
					        } else if (reaction == 'right') {
					        	console.log("comment sending!");

					        } else if (reaction == 'wrong') {

					        }

					        console.log(likesCount, angryCount, reaction)

					        if (angryCount){
						        // Generate angry reactions
						        for(var i = 0; i < angryCount; i++){
						        	var div = document.createElement('div');
						        	$(div).appendTo($(feed));
						        	$(div).addClass('reaction angry');
						        	socket.emit('feed:reaction', { gameId: 'TEST', reaction: 'angry-react' });
						        }
						    }

					        // Generate likes
					        for(var i = 0; i < likesCount; i++){
					        	console.log(i);
					        	var div = document.createElement('div');
					        	$(div).appendTo($(feed));
					        	$(div).addClass('reaction likes');
					        }

							
				    	});

				    	var reaction = $('.post-feed .reaction:not(.animating)');

					        _.each(reaction, function(icn, index) {

					        	// Give each reaction a random position
					        	var left = (Math.random() * 40);
					        	$(icn).css('top', '100%');
					        	$(icn).css('left', left + 'px');

					        	// Fade those suckers in one at a time
					        	setTimeout(function(){

					        		$(icn).fadeIn(function(){

					        			$(this).addClass('animating');

					        			var destroy = function() {
							        		console.log("hiding")
							        		setTimeout(function(){
							        			$(icn).fadeOut(function(){
							        				$(this).remove();
							        			});
							        		}, 1000);
							        	};

					        			TweenLite.to($(this), 7, {
							        		top: '0%', 
							        		ease: Bounce.easeOut,
							        		onComplete: destroy
							        	});


					        		});

					        	}, 800 * index);
				        		
					        });

					        $('.reaction').on('click', function() {
				        		console.log("click")
				        		if ($(this).hasClass('angry')) {

				        			var chance = (Math.round(Math.random() * 10))%2;			        			
				        			if (chance == 0) {
				        				console.log('we can just remove it');
					        			socket.emit('feed:reaction', { gameId: 'TEST', reaction: eventData.reaction });
						        		$(this).remove();
						        	} else {
						        		console.log("extra angry")
						        		socket.emit('feed:reaction', { gameId: 'TEST', reaction: 'extra-angry' });
						        		var div = document.createElement('div');
							        	$(div).appendTo($(feed));
							        	$(div).addClass('reaction angry');
							        	$(div).fadeIn(function(){
							        		$(this).addClass('animating')
							        		$(this).on('click', function(){
							        			$(this).remove();
							        		});
							        	});

							        	var destroy = function() {
							        		console.log("hiding")
							        		setTimeout(function(){
							        			$(div).fadeOut(function(){
							        				$(this).remove();
							        			});
							        		}, 1000);
							        	};

							        	TweenLite.to($(div), 7, {
							        		top: '0%', 
							        		ease: Bounce.easeOut,
							        		onComplete: destroy
							        	});
						        	}
						        	
				        		}
			        			
				        	});
				        
			        }
			       

			        break;

			    case 'feed:response':
			    	console.log(eventData, " repsonse")

			    	// Player got a message, let's show them
				    var message = $('.direct-message');
				    message.addClass(eventData.comment);
			    	message.find('.body').text(eventData.msg);
			    	message.fadeIn(function(){
			    		setTimeout(function(){
			    			message.fadeOut(function(){
			    				message.removeClass(eventData.comment);
			    			});
			    		}, 5000);
			    	}); 

			    	break;

				case 'profile:score':

		        	data = eventData;

		        	console.log("DATA: ", data);

		        	$('#feed').hide();

		        	$("#round-end").html(eventData.html).show();

		        	$('#round-score').show();

		        	setTimeout(function () {

		        		$('.next').fadeIn();

					}, 5000);

			        break;

			    case 'game:end':

				    $('#round-end').hide();

			      	$("#game-over").html(eventData.html).show();

			      	$('.final-points').text(eventData.data);

			      	$('#return-base').on('click', function(){

			      		// Call to update player, return to base

			      	});

			      	break;

		        default:

		            console.warn('No handler found for event "' + eventId + '" in socketEvents.');

		            break;

			}

		};

	{{/ifeq}}
		
});

</script>