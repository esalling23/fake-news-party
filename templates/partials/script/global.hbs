{{!< default}}
{{!-- 
/**
 * Emerging Citizens
 * Developed by Engagement Lab, 2016
 * ==============
 * 
 * Script include for global logic
 * ==========
 */
--}}

<script type="text/javascript">

	var socket;
	var socketEvents;
  var gameCode;
  var gameEnded = false;
	var gameContainer;

  var playerId;

	var role;
	var chosenProfile;


var StopPropagation = function(e) {
	e.stopPropagation(true);
	e.bubbles = false;
	e.stopImmediatePropagation();
}


 $(document).ready(function() {

	var timeline = new TimelineLite();

  // All possible socket event IDs
	var eventIds = [
		
		'connect',
		'disconnect',

		'game:start', 
		'game:rules',
		'game:newRound',

		'profile:complete',
		'profile:fail',
		'game:base',
		'game:levels',
		'game:end',

		'game:newProfile',
		'game:newFeed',
		
		'game:newRound',
		'game:playerData',

		'profile:score',

		'feed:end', 
		'feed:update',
		'feed:response'

	];


	/* 
	 Associate provided data object with current game ID
	*/
	var emitData = function(data) {

		if(gameCode === undefined && typeof(data.code) !== 'undefined')
			gameCode = data.code;

		return { gameId: gameCode, msgData: data };
	
	};

	/* 
	 Obtains the embedded data ('data-key="something"') object from the provided submit button
	*/
	var getFormData = function(submitElement) {

		var pkg;

		if(submitElement[0].dataset === undefined)
			return undefined;
		
		try {
			pkg = JSON.parse(submitElement[0].dataset.package);
		}
		catch(e) {
			pkg = submitElement[0].dataset.package;
		}

		if($.isPlainObject(pkg)) {
			$.each(Object.keys(pkg), function( key, value ) {

				if(pkg[value] !== undefined)
				  pkg[value] = $(pkg[value].toString()).val();

			});
		}
		else if(!submitElement.is('button'))
			pkg = $(pkg).val();

		return pkg;

	};

	var registerEvents = function() {

	    {{#ifeq environment "development"}}
	        
	        socket.on('connect_timeout', function() {
	           console.warn('Client timed out when connecting.');
	           {{!-- debugger; --}}
	        });
	        socket.on('disconnect', function() {
	           console.warn('Client was disconnected!');
	           {{!-- debugger; --}}
	        });
	        socket.on('reconnecting', function() {
	           console.log('Reconnecting.');
	           {{!-- debugger; --}}
	        });
	        socket.on('reconnect_attempt', function() {
	           console.log('Trying to reconnect!');
	           {{!-- debugger; --}}
	        });
	        socket.on('reconnect_error', function(err) {
	           console.error('Reconnect error: %s', err);
	           {{!-- debugger; --}}
	        });

	        console.log('Connecting to game "' + gameCode + '".');

	    {{/ifeq}}

	    $.each(eventIds, function(index, id) {
	      
	      socket.on(id, function(eventData) {

	            {{#ifnoteq environment "production"}}

	                $('#last-event').text('last event: ' + id);

	                console.log("EVENT ID: ", id);

	            {{/ifnoteq}}
	            
	            socketEvents(id, eventData);

	            if(typeof(gameEvents) == "function")
	                gameEvents(id, eventData);

	        });

	    });

	};

	// Show body only after everything is loaded
  	// document.body.style.display = "block";
  	$('body').fadeIn(1000);

  	// Login Popup Button Handler
    $('#teacher-entry, #student-entry').on('click', function(e) {

    	StopPropagation(e);

    	var data = {};
    	role = e.target.id.replace('-welcome', '');

    	$.get( 
    		"/api/welcome/" + role,
			data,
			function( data ) {
				$('.modal-wrapper#general').html(data.eventData).fadeIn();
			}
		);
    });

    // Login/Signup Button Handler
    $('body').on('click', '#login', function(e){

    	StopPropagation(e);

		var data = role;

    	$.get( 
    		"/api/login/" + role,
			data,
			function( data ) {

				window.location = data;

			}
		);
	});

    // Timespan Extended
    // When Clicking on a timespan block, it should fade away and show its broken down blocks (ie. 1800 would break down into 1800, 1820, 1840, 1860, 1880)
    // There should be an API call to get the playable characters for each time section
    $('body').on('click', '.timespan', function(e) {

    	StopPropagation(e);

    	$('.timespan-wrap').fadeOut();

    	var data = {
    		timespan: $(this).attr('id')
    	};

    	$.get( 
    		"/api/timespan/" + $(this).attr('id'),
			data,
			function( data ) {

				$('.timespan-ext').html(data.eventData).fadeIn();

			}
		);
    });

    // Click on profile and open code popup
    $('body').on('click', '.profile-link', function(e) {

    	StopPropagation(e);

    	$('.modal.code-wrapper #profile-name').text(e.target.attributes["data-name"].nodeValue);

    	chosenProfile = e.target.attributes["id"].nodeValue;

    	$('.modal-wrapper#code-modal, .modal.code-wrapper').fadeIn(); 

    });

    // Start Playing as Character - with or without class
    $('body').on('click', '#start-game', function(e) {

    	StopPropagation(e);

    	var pkg = {
    		profile: chosenProfile, 
    		code: $('.code').val()
    	};

    	$.post( 
		  	"/api/create/",
		  	pkg, 
				function( data ) {
					
					if(data.error_code !== undefined) {

						$('#session-create .error').text(data.msg).fadeIn();
						
						return;
					}

					window.location = data.url;

			});

    });


	{{#ifeq section 'player'}}

		socket = io('//{{host}}', {
		 	path: '/fake-news', 
		 	reconnection: true,
		 	'reconnectionDelay': 500,
		 	'maxReconnectionAttempts':Infinity
		});

		registerEvents();

		socketEvents = function(eventId, eventData) {
		    
		    switch (eventId) {

		        case 'connect':

			        console.log("connected");

			        $(document).on('click', 'button#game-newRound', function(e) {

			        	StopPropagation(e);

						socket.emit('game:start', { gameId: '{{gameId}}', profile: '{{profile.id}}' });

					});

			        break;

			    case 'game:newProfile': 

			    	data = eventData.data;
			    	console.log(data, " new profile")

			      	var startingpoints = 10000*parseInt(data.currentProfile.level);
			      	var bar;

			      	$('.pre').hide(function() {
			      		$('.game').show();
			      	});		      	

			      	$("#current-profile").html(eventData.html).fadeIn(function(){

			      		setTimeout(function () {

						    $('#analysis').fadeIn();

						}, 500);

						$('#start-round').on('click', function(e) {

							StopPropagation(e);

							$('#analysis').fadeOut(function(){
								$('.profile-wrapper .profile-btn').fadeIn();
								$("#current-profile").hide();
							});

				      		socket.emit('game:newFeed', '{{gameId}}');
				      		
				      	});

			      	});

			      	break;

			    case 'game:newFeed': 

			      	data = eventData.data;
		        	console.log("DATA: ", data);

		        	$('.profile').animate({
		        		top: '100%'
		        	}, 1000, 'linear', function(){
		        		$(this).addClass('closed');
		        	});

		        	$("#feed").html(eventData.html).addClass('ACTIVE').fadeIn(function(){
		        		$('.fb-footer').show();
		        	});

		        	// close/open profile
		        	$('.profile-btn').click(function(){
						$('.profile.closed').animate({
			        		top: '0%'
			        	}, 1000, 'linear', function(){
			        		$('.profile').toggleClass('closed').toggleClass('open');
			        	});
			        	$('.profile.open').animate({
			        		top: '100%'
			        	}, 1000, 'linear', function(){
			        		$('.profile').toggleClass('open').toggleClass('closed');
			        	});
		        	});

		        	$('#feed-btn').click(function(){
						$('.profile').animate({
			        		left: '100%'
			        	}, 1000, 'linear', function(){
			        		$(this).hide();
			        	});
		        	});

		        	{{> script/falling_logic}}

		        	$(document).trigger('event:feed');

			      	break;

		        case 'comment:update':

			        console.log(eventData.msg);

			        alert(eventData.msg);

			        break;

			    case 'feed:update':

			    	// Based on their points out of 100, now let it be worth 25% of the grade
				    bar = eventData.reaction;

				    console.log($('.reputation-bar').data('start'), eventData.reaction)

			        var feed = $('.post-feed');

			        $({ countNum: $('.reputation-bar div').text() })
					.animate({ countNum: bar },
					{ 
					    duration: 500,
					    easing:'linear',
					    step: function() {
					      $('.reputation-bar div').text(Math.floor(this.countNum));
					    },
					    complete: function() {
					      $('.reputation-bar div').text(this.countNum);
					    }
					});

			        $('.reputation-bar div').animate({
			        	width: bar + '%'
			        }, 500, function() {
			        	console.log('moved to ' + bar)
			        });

			        if (bar <= 30) {
			        	$('.reputation-bar div').animate({
				        	background: '#fa3e3e'
				        }, 500, function() {
				        	console.log('bar color hcange')
				        });
			        } else if (bar <= 60) {
			        	$('.reputation-bar div').animate({
				        	background: '#f8a058'
				        }, 500, function() {
				        	console.log('bar color change')
				        });
			        }

			        // CheckFollowerSatisfaction()
			        switch (bar) {

						case (bar >= 95):
							// Thrilled
							$('.follower-image').attr('src', "/images/thrilled.png");
							break;

						case (bar < 95):
							// Happy
							$('.follower-image').attr('src', "/images/happy.png");
							break;

						case (bar < 80):
							// Interested
							$('.follower-image').attr('src', "/images/interested.png");
							break;

						case (bar < 70):
							// Bored
							$('.follower-image').attr('src', "/images/neutral.png");
							break;

						case (bar < 50):
							// Suspicious
							$('.follower-image').attr('src', "/images/bored.png");
							break;

						case (bar < 40):
							// Suspicious
							$('.follower-image').attr('src', "/images/suspicious.png");
							break;

						case (bar < 30):
							// Unfollowing
							$('.follower-image').attr('src', "/images/unfollowing.png");
							break;
					}
			       
			        
			        break;

			    case 'feed:tagged':

			    	if (eventData.status)  {
			    		// Tagged correctly
			    		
			    	}

			    	break;

			    case 'feed:response':
			    
			    	console.log(eventData, " repsonse")

			    	// Player got a message, let's show them
				    var message = $('.direct-message');
				    message.addClass(eventData.comment);
			    	message.find('.body').text(eventData.msg);
			    	message.fadeIn(function(){
			    		setTimeout(function(){
			    			message.fadeOut(function(){
			    				message.removeClass(eventData.comment);
			    			});
			    		}, 5000);
			    	}); 

			    	break;

				case 'profile:score':

		        	data = eventData;

		        	console.log("DATA: ", data);

		        	$('#feed').hide();

		        	$("#round-end").html(eventData.html).show();

		        	$('#round-score').show();

		        	setTimeout(function () {

		        		$('.next').fadeIn();

					}, 5000);

			        break;

			    case 'game:end':

				    $('#round-end').hide();

			      	$("#game-over").html(eventData.html).show();

			      	$('.final-points').text(eventData.data);

			      	$('#return-base').on('click', function(){

			      		// Call to update player, return to base

			      	});

			      	break;

		        default:

		            console.warn('No handler found for event "' + eventId + '" in socketEvents.');

		            break;

			}

		};

	{{/ifeq}}
		
});

</script>